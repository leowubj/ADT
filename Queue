public class Queue {
	private int capacity;
	private int front = 0;
	private int rear = 0;
	private int numInQueue = 0;
	Object[] array;
	
	public Queue() {
	     this.capacity = 10;
	     array = new Object[capacity];
	 }
	 
	 public Queue(int n) {
		 this.capacity = n;
		 array = new Object[n];
	 }
	 
	 public boolean isFull() {
		 if(rear == front-1) {
			 return true;
		 }
		 if((rear == 0)||(front == capacity)){
			return true; 
		 }
		 else{
			 return false;
		 }
	 }
	 
	 public boolean isEmpty() {
		 if(rear == front) {
			 return true;
		 }
		 else {
			 return false;
		 }
	 }
	 
	 public boolean enqueue(Object element) {
		 if(!isFull()) {
			 array[front]=element;
			 front ++;
			 if(front > capacity) {
				 front = 0;
			 }
			 numInQueue ++;
			 return true;
		 }
		 else {
			 return false;
		 }
	 }
	 
	 public Object dequeue() {
		 if(!isEmpty()) {
			 Object n = array[rear];
			 array[rear]=null;
			 rear --;
			 if(rear<0) {
				 rear = capacity;
			 }
			 numInQueue --;
			 return n;
		 }
		 else {
			 return null;
		 }
		 
	 }
}
